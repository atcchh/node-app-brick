
var http = require('http');
var url = require('url');

var httpUtils = require('node-forceps').httpUtils;
var fileUtils = require('node-forceps').fileUtils;
var uuid = require('node-forceps').uuid;

var path = require('path');
var cheerio = require('cheerio');





var htmlMap = {};
var saveAndReplace = function(siteUrl, downloadPath, deepen) {
	if(!deepen) {
		deepen = 1;
	}
	if(!downloadPath) {
		downloadPath = "./"
	}

	return httpUtils.getHtml(siteUrl).then(function(data){
		
		var $ = cheerio.load(data);
		// script save
		
		console.log(getFileName(siteUrl) + ":      start to download the script");
		$("script").each(function(i,e){
			var $this = $(e);
			var scriptSrc = $this.attr("src");
			if(scriptSrc) {
				if(scriptSrc.match("^(https?:)?//(.*)")) {
					if(scriptSrc.match("^//.*")) {
						scriptSrc = "http:" + scriptSrc;
					}
				} else {
					var scriptFileName = getFileName(scriptSrc);
					if(!htmlMap[scriptFileName]) {
						htmlMap[scriptFileName] = url.parse(url.parse(siteUrl).resolve(scriptSrc));
						console.log(getFileName(siteUrl) + ":      download the script [" + scriptSrc + "]");
						saveJSandCSS(htmlMap[scriptFileName].href, path.resolve(downloadPath, "js", scriptFileName));
					}
					$this.attr("src", "js/" + scriptFileName);
				}

			}

		});

		// css save
		console.log(getFileName(siteUrl) + ":      download the css file");
		$("link[rel=stylesheet]").each(function(i,e){
			var $this = $(e);
			var cssSrc = $this.attr("href");
			if(cssSrc) {
				console.log(getFileName(siteUrl) + ":      download the css file [" + cssSrc + ']');
				if(cssSrc.match("^(https?:)?//(.*)")) {
					var id = +new Date().getTime();
					if(cssSrc.match("^//.*")) {
						cssSrc = "http:" + cssSrc;
					}
					
					saveJSandCSS(cssSrc, path.resolve(downloadPath, "css","third",id + ".css"));
					$this.attr("href", "css/third/" + id + ".css" + "?" + cssSrc);
				} else {

					var cssscriptFileName = getFileName(cssSrc);
					
					if(!htmlMap[cssscriptFileName]) {
						htmlMap[cssscriptFileName] = url.parse(url.parse(siteUrl).resolve(cssSrc));
						
						saveJSandCSS(htmlMap[cssscriptFileName].href, path.resolve(downloadPath, "css", cssscriptFileName));
					}
					$this.attr("href", "css/" + cssscriptFileName + "?" + cssSrc);
				}
			}
		});
		if(deepen > 1) {
			var linkArray = [];
			$("a").each(function(i, e){
				var $this = $(e);
				var linkHref = $this.attr("href");
				

				if(!linkHref.match('^#') && !linkHref.match('^javascript')) {
					var newTargetUrl = url.parse(siteUrl).resolve(linkHref);
					linkArray.push(newTargetUrl)

				// 	$this.attr("old-href", linkHref);
				// 	
				// 	saveAndReplace(newTargetUrl, downloadPath, deepen -1);
				// 	$this.attr("href", "./" + getFileName(newTargetUrl));
				}
			});
			
			for(var index = 0; index < linkArray.length; index ++) {
				var linkUrl = linkArray[index];
				console.log(linkUrl);
				saveAndReplace(linkUrl, downloadPath, deepen -1);
			}
		}
		console.log(getFileName(siteUrl) + ":      download the file");
		return fileUtils.writeFile(path.resolve(downloadPath, getFileName(siteUrl)), $.html());
	}).fail(function(err){
		return console.log(error);
	});	
}

var saveJSandCSS = function(url, filePath) {
	if(!filePath) {
		filePath = getFileName(url);
	}
	return httpUtils.getHtml(url).then(function(data){
		return fileUtils.writeFile(filePath, data);
	}).fail(function(error) {
		return console.log(error);
	});
}


var getFileName = function(uri) {
	 return uri.split("/").pop();
}
saveAndReplace("http://responsiweb.com/themes/preview/ace/1.3.1/index.html", "/tmp/3",2);
