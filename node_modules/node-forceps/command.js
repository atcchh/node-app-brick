var spawn = require('./child_process_promise.js').spawn;

Buffer.prototype.toString = function(encoding, start, end) {
  var loweredCase = false;
  start = start >>> 0;
  end = util.isUndefined(end) ? this.length : end >>> 0;
  if (!encoding) encoding = 'utf8';
  if (start < 0) start = 0;
  if (end > this.length) end = this.length;
  if (end <= start) return '';
  while (true) {
    switch (encoding) {
      case 'hex':
        return this.hexSlice(start, end);
      case 'utf8':
      case 'utf-8':
        return this.utf8Slice(start, end);
      case 'ascii':
        return this.asciiSlice(start, end);
      case 'binary':
        return this.binarySlice(start, end);
      case 'base64':
        return this.base64Slice(start, end);
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return this.ucs2Slice(start, end);
      default:
        if (loweredCase)
          throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
};

function Command(command, args) {
	this.command = command;
	this.args = args;
	// console.log(command);
	// console.log("------------------------------------");
	// console.log(args);
}
Command.prototype.run = function() {
	var taskName = process.pid;
	return spawn(this.command, this.args)
	    .progress(function(childProcess) {
	        taskName = 'task ' + process.pid + '.' + childProcess.pid
	        childProcess.stdout.on('data', function(data) {
	            console.log('['+ taskName + '] stdout: \n--------------------------------\n', data.toString());
	        });
	        childProcess.stderr.on('data', function(data) {
	            console.log('['+ taskName + '] stderr: ', data.toString()); 
	        });
	    })
	    .then(function(result) {
	         console.log('--------------------------------\n['+ taskName + '] done!');
	    })
	    .fail(function(err) {
	    	console.error('['+ taskName + '] ERROR: ', err.toString());
	        console.error('['+ taskName + '] ERROR: ', err.toString());
	    });
}



module.exports = Command;



