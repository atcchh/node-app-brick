var http = require('http');
var https = require('https');
var URL = require('url');
var fs = require('fs');
var fileUtils = require('./fileUtils')

http.globalAgent.maxSockets = 100;
var Q = require('q');
var Path = require('path');

var downloadFile = function(urlString, fileName){
	var deferred = Q.defer();
	var url = URL.parse(urlString);
	var protocol = (url.protocol === 'http:'? http:https);
	protocol.get(urlString, function(res) {
		var header = res.headers
		var buffer = new Buffer(0, 'binary');
		res.on('data', function (chunk) {
			buffer = Buffer.concat([buffer, new Buffer(chunk,'binary')])
		});
		res.on('end', function(){
			fs.writeFile( fileName,buffer, function() {
				deferred.resolve(res);
			});
		});
	});
	return deferred.promise;
};

var uploadFile = function(urlString, parameter, filePath) {
	return fileUtils.getContentBuffer(filePath)
		.then(function(chunks){
			var deferred = Q.defer();
			var boundaryKey = '----' + new Date().getTime() ;
			var tempData = '';
			for( var temp in parameter) {
				tempData +=         '--' + boundaryKey + '\r\n' ;
				tempData +=         'Content-Disposition: form-data; name="'+ temp + '"\r\n\r\n' 
				tempData +=         parameter[temp] + '\r\n';
			}
			var fileName = Path.basename(filePath);
			var url = URL.parse(urlString);
			tempData += '--' + boundaryKey + '\r\n' +
				'Content-Disposition: form-data; name="image"; filename="' + filePath + '"\r\n' +
				'Content-Type: image/png\r\n\r\n'
				// 'Content-Type: application/octet-stream\r\n\r\n'
			var buffer = new Buffer(tempData + '\r\n--' + boundaryKey + '--');
			var options = {
				//'host':url.host,//远端服务器域名
				//'port':80,//远端服务器端口号
				//'method':'POST',
				//'path':path,//上传服务路径
				hostname: url.hostname,
				port: url.protocol === 'http:'? 80:443,
				path: url.path,
				method: 'POST',
				headers:{
					'Content-Type':'multipart/form-data; boundary=' + boundaryKey,
					'Connection':'close',
					'Content-Length':buffer.length + chunks.length
					// 'Content-Length':Buffer.byteLength(tempData + '\r\n--' + boundaryKey + '--') + stat.size
				}
			};
			
			var req = http.request(options,function(res){
				res.setEncoding('utf8');
				var dataChunk = '';
				res.on('data', function (chunk) {
					dataChunk+=chunk;
				});
				res.on('error', function(err){
					console.log("upload the file error");
					deferred.reject(err);
				});
				res.on('end',function(){
					deferred.resolve(dataChunk);
				});
				// add the error info
			}).on('error', function(err){
				console.log("xx")
				deferred.reject(err);
			});

	    	req.write(tempData);
	    	req.write(chunks);
			req.end('\r\n--' + boundaryKey + '--');
			return deferred.promise;
		});
}

var getHtml = function(urlString) {
	var defferred = Q.defer();	
	var html = '';
	http.get(urlString, function(res) {
	    res.on('data', function(data) {
	        html += data;
	    }).on('end', function() {
	        defferred.resolve(html);
	    });
	});
	return defferred.promise;
}


module.exports.downloadFile = downloadFile;
module.exports.uploadFile = uploadFile;
module.exports.getHtml = getHtml;

// getHtml("http://www.baidu.com").then(function(data) {
// 	console.log(data);
// });