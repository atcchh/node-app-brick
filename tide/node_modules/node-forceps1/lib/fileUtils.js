var fs = require('fs');
var Q = require('q');
var path = require('path');
 
var readLastLine = function(filePath, encode) {
	var deferred = Q.defer();
	var _encode = (encode?encode:'utf-8');
	fs.readFile(filePath, _encode, function(err, data) {
		if (err) {
			deferred.reject(new Error(err));
		}
		var lines = data.trim().split('\n');
		var lastLine = lines.slice(-1)[0];
		deferred.resolve(lastLine);
	});
	return deferred.promise;
}
var readLines = function(filePath, encode) {
	var deferred = Q.defer();
	var _encode = (encode?encode:'utf-8');
	fs.readFile(filePath, _encode, function(err, data) {
		if (err) {
			deferred.reject(new Error(err));
		}
		var lines = data.trim().split('\n');
		deferred.resolve(lines);
	});
	return deferred.promise;
}
var writeFile = function(fileFuleName, content) {
	var deferred = Q.defer();
	var dirname = path.dirname(fileFuleName);
	mkdirs(dirname, function() {
		fs.writeFile(fileFuleName, content, function (err) {
		  	if (err) {
				deferred.reject(new Error(err));
			} else {
				deferred.resolve();	
			}
		});	
	});
	return deferred.promise;
}
// 创建所有目录
var mkdirs = function(dirpath,  callback) {
    fs.exists(dirpath, function(exists) {
        if(exists) {
                callback(dirpath);
        } else {
                //尝试创建父目录，然后再创建当前目录
                mkdirs(path.dirname(dirpath), function(){
                        fs.mkdir(dirpath, callback);
                });
        }
    });
};
var getContentBuffer = function(fileName) {
	var deferred = Q.defer();
	var readstream = fs.createReadStream(fileName,{flags:'r',encoding:null});
    var chunks=[];
    var length = 0;
    readstream.on('data', function(chunk) {
        length += chunk.length;
        chunks.push(chunk);
    });
    readstream.on('error', function(err) {
    	deferred.reject(err);
    });
    readstream.on('end', function() {
        var buffer = new Buffer(length);
        for(var i = 0, pos = 0, size = chunks.length; i < size; i++) {
            chunks[i].copy(buffer, pos);
            pos += chunks[i].length;
        }
        deferred.resolve(buffer);
    });
    return deferred.promise;
}
module.exports.readLastLine=readLastLine;
module.exports.writeFile=writeFile;
module.exports.mkdirs=mkdirs;
module.exports.readLines=readLines;
module.exports.getContentBuffer=getContentBuffer;


